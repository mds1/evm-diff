import type { Address, Hex, PublicClient } from 'viem';

export async function checkPrecompiles(
	client: PublicClient,
): Promise<{ name: string; address: Address; implemented: boolean }[]> {
	const result = precompiles.map(async ({ name, address, testCalldata, expectedResponse }) => {
		try {
			const res = await client.call({ to: address, data: testCalldata });
			const implemented = res.data === expectedResponse;
			return { name, address, implemented };
		} catch (e) {
			// If the call fails, the precompile is not implemented.
			return { name, address, implemented: false };
		}
	});
	return await Promise.all(result);
}

// By default a call to an EOA succeeds and returns no data, therefore we cannot simply use a
// successful call as a signal that the precompile is implemented. Instead we must provide a test
// vector. The test calldata and corresponding expected response are provided for each precompile,
// and are from the examples used on the playground links from https://www.evm.codes/precompiled
// unless otherwise noted.
export const precompiles: {
	name: string;
	address: Address;
	testCalldata: Hex;
	expectedResponse: Hex;
}[] = [
	{
		address: '0x0000000000000000000000000000000000000001',
		name: 'ecRecover',
		testCalldata:
			'0x456e9aea5e197a1f1af7a3e85a3212fa4049a3ba34c2289b4c860fc0b0c64ef3000000000000000000000000000000000000000000000000000000000000001c9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac80388256084f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada0000000000000000000000000000000000000000000000000000000000000000',
		expectedResponse: '0x0000000000000000000000007156526fbd7a3c72969b54f64e42c10fbb768c8a',
	},
	{
		address: '0x0000000000000000000000000000000000000002',
		name: 'SHA2-256',
		testCalldata: '0xff',
		expectedResponse: '0xa8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89',
	},
	{
		address: '0x0000000000000000000000000000000000000003',
		name: 'RIPEMD-160',
		testCalldata: '0xff',
		expectedResponse: '0x0000000000000000000000002c0c45d3ecab80fe060e5f1d7057cd2f8de5e557',
	},
	{
		address: '0x0000000000000000000000000000000000000004',
		name: 'identity',
		testCalldata: '0xff',
		expectedResponse: '0xff',
	},
	{
		address: '0x0000000000000000000000000000000000000005',
		name: 'modexp',
		testCalldata:
			'0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000108090A0000000000000000000000000000000000000000000000000000000000',
		expectedResponse: '0x08',
	},
	{
		address: '0x0000000000000000000000000000000000000006',
		name: 'ecAdd',
		testCalldata:
			'0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002',
		expectedResponse:
			'0x030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd315ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4',
	},
	{
		address: '0x0000000000000000000000000000000000000007',
		name: 'ecMul',
		testCalldata:
			'0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002',
		expectedResponse:
			'0x030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd315ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4',
	},
	{
		address: '0x0000000000000000000000000000000000000008',
		name: 'ecPairing',
		testCalldata:
			'0x2cf44499d5d27bb186308b7af7af02ac5bc9eeb6a3d147c186b21fb1b76e18da2c0f001f52110ccfe69108924926e45f0b0c868df0e7bde1fe16d3242dc715f61fb19bb476f6b9e44e2a32234da8212f61cd63919354bc06aef31e3cfaff3ebc22606845ff186793914e03e21df544c34ffe2f2f3504de8a79d9159eca2d98d92bd368e28381e8eccb5fa81fc26cf3f048eea9abfdd85d7ed3ab3698d63e4f902fe02e47887507adf0ff1743cbac6ba291e66f59be6bd763950bb16041a0a85e000000000000000000000000000000000000000000000000000000000000000130644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd451971ff0471b09fa93caaf13cbf443c1aede09cc4328f5a62aad45f40ec133eb4091058a3141822985733cbdddfed0fd8d6c104e9e9eff40bf5abfef9ab163bc72a23af9a5ce2ba2796c1f4e453a370eb0af8c212d9dc9acd8fc02c2e907baea223a8eb0b0996252cb548a4487da97b02422ebc0e834613f954de6c7e0afdc1fc',
		expectedResponse: '0x0000000000000000000000000000000000000000000000000000000000000001',
	},
	{
		address: '0x0000000000000000000000000000000000000009',
		name: 'blake2f',
		testCalldata:
			'0x0000000c48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b61626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000001',
		expectedResponse:
			'0xba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d17d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923',
	},
	{
		// This test vector is from https://github.com/ethereum/execution-spec-tests/blob/1983444bbe1a471886ef7c0e82253ffe2a4053e1/tests/cancun/eip4844_blobs/point_evaluation_vectors/go_kzg_4844_verify_kzg_proof.json#L3-L9.
		// With the version hash versioned hash aspect of the calldata computed per the spec as
		// `0x01 || sha256(commitment)[1:]` where || represents concatenation.
		address: '0x000000000000000000000000000000000000000a',
		name: 'point evaluation',
		testCalldata:
			'0x010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c44401400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
		expectedResponse:
			'0x000000000000000000000000000000000000000000000000000000000000100073eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001',
	},
	{
		// RIP-7212: Precompile for secp256r1 Curve Support
		// This test vector is from https://github.com/maticnetwork/bor/blob/bade7f57df5c09ae060c15fc66aed488c526149e/core/vm/testdata/precompiles/p256Verify.json#L3
		// The secp256r1 precompile returns bytes32(1) if the signature is valid, and 0x otherwise.
		address: '0x0000000000000000000000000000000000000100',
		name: 'secp256r1',
		testCalldata:
			'0x4cee90eb86eaa050036147a12d49004b6b9c72bd725d39d4785011fe190f0b4da73bd4903f0ce3b639bbbf6e8e80d16931ff4bcf5993d58468e8fb19086e8cac36dbcd03009df8c59286b162af3bd7fcc0450c9aa81be5d10d312af6c66b1d604aebd3099c618202fcfe16ae7770b0c49ab5eadf74b754204a3bb6060e44eff37618b065f9832de4ca6ca971a7a1adc826d0f7c00181a5fb2ddf79ae00b4e10e',
		expectedResponse: '0x0000000000000000000000000000000000000000000000000000000000000001',
	},
];
